version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/UafN7LHaBAQ7N5bNtXHfbj/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 ))
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            else
                echo "No migrations to revert"
            fi          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test          

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test  

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [frontend-scan]
      - run:
          name : scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-scan]
      - run:
          name : scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
     
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo -e "[web]\n" > ./.circleci/ansible/inventory  
              BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              echo "bla"
              echo $BACKEND_IP >> ./.circleci/ansible/inventory 
              cat ./.circleci/ansible/inventory              
       
      - persist_to_workspace:
          root: .  
          paths:
            - .circleci/ansible/inventory

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  

      - revert_migrations      
        
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:5e:93:0d:93:89:ff:12:ee:3a:d5:fc:1d:d2:bd:27"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible openssh
            ansible --version

      - attach_workspace:
          at: ~/      

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "$(pwd)"
            ansible-playbook -i inventory configure-server.yml -vvv

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    

      - revert_migrations    


  run-migrations:
    docker:
      # Select proper image
      - image: circleci/node:14.17.6
    steps:
      - checkout
      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_log.txt 2>&1
            echo 'has been executed successfully.' >> migrations_log.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_log.txt
              then
                echo "insecure" >> ~/.curlrc
                curl https://kvdb.io/UafN7LHaBAQ7N5bNtXHfbj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi  

  check-workspace-content:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - run:
          name: Check Workspace Content
          command: ls -R
                           

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0

    environment:
      API_URL: ""  # Empty string as the default value 

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt upgrade            
            sudo apt install curl
      - run:
          name: Install aws
          command: |                        
            sudo apt install curl
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

      - run:
          name: Get backend URL and deploy frontend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text | grep -v '\[web\]')
            echo $BACKEND_IP >> ./.circleci/ansible/inventory
            cat ./.circleci/ansible/inventory
            BACKEND_IP=$(echo "$BACKEND_IP" | tr -d '[:space:]')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            mkdir -p frontend
            echo NODE_ENV=production >> "frontend/.env"
            echo "API_URL=${API_URL}" >> "frontend/.env"

            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist

            aws s3 cp ./artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

            echo "Deployed objects path: $(pwd)/dist" 

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail   

      - revert_migrations


  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:5e:93:0d:93:89:ff:12:ee:3a:d5:fc:1d:d2:bd:27"]

      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install --upgrade pip
            pip install awscli
            aws --version
            cd backend  # Change to the backend directory
     
      - run:
          name: Compress Backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env" 
            tar -C backend -czvf artifact.tar.gz .
            ls -la     
            
      - attach_workspace:
          at: ~/      
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            echo "Inventory file : "
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml --extra-vars "CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID}"  

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail        

      - revert_migrations        
    
  smoke-test:
    docker:
      - image: python:3.11-rc-alpine 

    steps:
      - checkout
      - run:
          name: "Install-dependencies"
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: "Backend smoke test."
          command: |  
            BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text | grep -v '\[web\]')
            echo $BACKEND_IP >> ./.circleci/ansible/inventory 
            cat ./.circleci/ansible/inventory
            BACKEND_IP=$(echo "$BACKEND_IP" | tr -d '[:space:]')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi    
      - run:
          name: "Frontend-smoke-test."
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo ${URL} 
             if curl -s ${URL} | grep "Welcome"
             then
                 return 0
             else
                 return 1
             fi      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail        
          
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Get previous stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            OldWorkflowID=${OldWorkflowID#udapeople-}
            echo OldWorkflowID: "${OldWorkflowID}"
            echo "${OldWorkflowID}" > OldWorkflowID.txt
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"        
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

      - revert_migrations  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"   
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo 'Cleaning bucket and stacks: '
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID: -7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID: -7}"
              echo 'Cleaned'
            else
              echo '***** Cannot remove *****'
            fi
    
                                       
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]  
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]  
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]    
      - cloudfront-update:
          requires: [smoke-test]  
           
      
      
             
           
      