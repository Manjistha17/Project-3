version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test          

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test  

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [frontend-scan]
      - run:
          name : scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-scan]
      - run:
          name : scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
     
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo -e "[web]\n" > ./.circleci/ansible/inventory  
              BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              echo "bla"
              echo $BACKEND_IP >> ./.circleci/ansible/inventory 
              cat ./.circleci/ansible/inventory              
       
      - persist_to_workspace:
          root: .  
          paths:
            - .circleci/ansible/inventory

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  
        
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:5e:93:0d:93:89:ff:12:ee:3a:d5:fc:1d:d2:bd:27"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible openssh
            ansible --version

      - attach_workspace:
          at: ~/      

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "$(pwd)"
            ansible-playbook -i inventory configure-server.yml -vvv

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    


  run-migrations:
    docker:
      # Select proper image
      - image: circleci/node:14.17.6
    steps:
      - checkout
      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_log.txt 2>&1
            echo 'has been executed successfully.' >> migrations_log.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_log.txt
              then
                echo "insecure" >> ~/.curlrc
                curl https://kvdb.io/UafN7LHaBAQ7N5bNtXHfbj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi  

  check-workspace-content:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - run:
          name: Check Workspace Content
          command: ls -R
                           

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip

        # Attach workspace to have access to previously set environment variables
      - attach_workspace:
          at: ~/

      - run:
          name: Install Node.js and npm
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs

      - run:
          name: Get backend url
          command: |
            cd .circleci/ansible
            cat inventory
            echo $(cat inventory)
            echo $(pwd)
            export BACKEND_IP=$(inventory | sed 2d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env  
            cat frontend/.env    

                                       
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]  
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]  
      
             
           
      